#! /usr/bin/env python3
import mlugbot.botbase as botbase
import getrandom
import pickle
import threading
from sys import argv
from prepare_arguments import get_argument, get_bool_argument
from uuid import uuid1
from random import randint, choice, random
from time import sleep

token = None
sessionid = False

last_uuid = get_argument(argv, '--uuid')
sessionid = get_argument(argv, '--sessionid')
token = get_argument(argv, '--token')
read_from_anon = get_bool_argument(argv, '--anon-read')

usage = ("Usage: lurkabot --uuid (uuid) --token [token]"
         "--sessionid (sessionid) [--anon-read]")
if (not token) or get_bool_argument(argv, '--help'):
    print(usage)
    exit(1)

censored = ["хуй", "пизда", "залупа", "жобе", "петух"]
copypaste_file = "/home/kasper/src/txt/copypaste/lurka1/lurka1"
antifaggot = "%s – %s – не матерись, хули ты '%s' сказал-то (%s) -> %s"


"""
def filter_word(uuid, time, name, msg):
    result = []
    for word in msg.split(' '):
        if word in censored:
            print("[write thread] faggot")
            random_petuh = censored[randint(0, len(censored) - 1)]
            result.append(antifaggot % (name, random_petuh,
                                        word, time, uuid1()))
    return result
"""


"""
def get_pasta(uuid, time, name, msg):
    if "дай пасты" in msg:
        print("[write thread] pasta request")
        return [getrandom.get_random_from_file(copypaste_file)]
"""


def generate_chain(src):
    src = src.split()
    src = list(map(lambda c: c[:-1] if c[-1] == "," else c,
                   src))
    dest = {}
    src = ["*START*"] + src + ["*END*"]

    for i in range(0, len(src) - 1):
        word = src[i]
        if word != "*END*":
            next = src[i + 1]
            if word in dest:
                dest[word].append(next)
            else:
                dest[word] = [next]

    return dest


def add_dict_with_list(a, b):
    buff = a.copy()
    for elem in b:
        if elem in buff:
            buff[elem] += b[elem]
        else:
            buff[elem] = b[elem]

    return buff


#fin = open("ru.delusional.txt", 'r')
#text = fin.read()
#fin.close()

#text = text.replace("?", ".")
#text = text.replace("!", ".")
#text = text.split(". ")
#deutsch = {}
#for addition in text:
#    deutsch = add_dict_with_list(deutsch, generate_chain(addition))

deutsch = {}
file_name = "delusional.pickle"
f = open(file_name, 'rb')

try:
    deutsch = pickle.load(f)
except EOFError:
    print("[init thread] warning: db is empty")
f.close()


def save_db():
    while True:
        print("[save thread] db saving started")
        f = open(file_name, 'wb')
        pickle.dump(deutsch, f)
        f.close()

        print("[save thread] save done")
        print("[save thread] sleep")
        sleep(2)
        print("[save thread] sleep done")


def delusional(uuid, time, name, msg):
    global deutsch
    deutsch = add_dict_with_list(deutsch, generate_chain(msg))
    if random() > 0.6:
        print("[write thread] Alice detected")
        msg = ""
        current_word = "*START*"
        while current_word != "*END*":
            current_word = choice(deutsch[current_word])
            if current_word != "*END*":
                msg += current_word + " "

        return [(msg + " -> %s") % (uuid1())]


saver = threading.Thread(target=save_db)

functions = [delusional]
bot = botbase.Bot(sessionid, token, last_uuid,
                  functions, read_from_anon=read_from_anon)

saver.start()
bot.run()

saver.join()
